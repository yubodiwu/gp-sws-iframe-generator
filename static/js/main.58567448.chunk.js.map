{"version":3,"sources":["serviceWorker.js","IframeGenerator.js","index.js","IframeGenerator.module.scss"],"names":["Boolean","window","location","hostname","match","IframeGenerator","React","useState","src","setSrc","Date","now","selectedDate","setSelectedDate","iframe","setIframe","className","styles","title","generatorForm","TextField","required","id","label","onChange","event","target","value","utils","DateFnsUtils","margin","format","date","KeyboardButtonProps","Button","generate","color","onClick","Math","floor","getTime","copyInput","document","querySelector","focus","select","execCommand","variant","generatedContent","buttonLabel","source","hidden","readOnly","type","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"+NAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kGCsDSC,EA5DS,WAAO,IAAD,EACNC,IAAMC,SAAS,IADT,mBACrBC,EADqB,KAChBC,EADgB,OAEYH,IAAMC,SAASG,KAAKC,OAFhC,mBAErBC,EAFqB,KAEPC,EAFO,OAGAP,IAAMC,SAAS,IAHf,mBAGrBO,EAHqB,KAGbC,EAHa,KAK5B,OACE,oCACE,wBAAIC,UAAWC,IAAOC,OAAtB,gCACA,yBAAKF,UAAWC,IAAOE,eACrB,kBAACC,EAAA,EAAD,CAAWC,UAAQ,EAACC,GAAG,iBAAiBC,MAAM,iBAAiBC,SAAU,SAAAC,GAAK,OAAIhB,EAAOgB,EAAMC,OAAOC,UACtG,kBAAC,IAAD,CAAyBC,MAAOC,KAC9B,kBAAC,IAAD,CACEC,OAAO,SACPR,GAAG,qBACHC,MAAM,qBACNQ,OAAO,aACPJ,MAAOf,EACPY,SAAU,SAAAQ,GAAI,OAAInB,EAAgBmB,IAClCC,oBAAqB,CACnB,aAAc,iBAGlB,kBAAC,IAAD,CACEH,OAAO,SACPR,GAAG,cACHC,MAAM,cACNI,MAAOf,EACPY,SAAU,SAAAQ,GAAI,OAAInB,EAAgBmB,IAClCC,oBAAqB,CACnB,aAAc,kBAIpB,kBAACC,EAAA,EAAD,CACElB,UAAWC,IAAOkB,SAClBC,MAAM,UACNC,QAAS,WACPtB,EAAU,gEAAD,OAAiEP,EAAjE,2BAAuF8B,KAAKC,MAAM,IAAI7B,KAAKE,GAAc4B,UAAY,KAArI,yIACT,IAAMC,EAAYC,SAASC,cAAc,iBACzCF,EAAUG,QACVH,EAAUI,SACVH,SAASI,YAAY,SAEvBC,QAAQ,aAVV,mBAcA,kBAACb,EAAA,EAAD,OAEDpB,GACC,yBAAKE,UAAWC,IAAO+B,kBACrB,uBAAGhC,UAAWC,IAAOgC,aAArB,wBACA,kBAAC,IAAD,CAAejC,UAAWC,IAAOH,OAAQoC,OAAM,aAAWpC,EAAX,UAGnD,2BAAOqC,QAAM,EAACC,UAAQ,EAAC9B,GAAG,eAAe+B,KAAK,OAAO1B,MAAOb,MC7DlEwC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFd,SAASe,eAAe,SFyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,mBGxI5BC,EAAOC,QAAU,CAAC,MAAQ,+BAA+B,cAAgB,uCAAuC,SAAW,kCAAkC,iBAAmB,0CAA0C,YAAc,qCAAqC,WAAa,oCAAoC,OAAS,mC","file":"static/js/main.58567448.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { Button, TextField } from '@material-ui/core';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers';\nimport ReactMarkdown from 'react-markdown';\n\nimport styles from './IframeGenerator.module.scss';\n\nconst IframeGenerator = () => {\n  const [src, setSrc] = React.useState('');\n  const [selectedDate, setSelectedDate] = React.useState(Date.now());\n  const [iframe, setIframe] = React.useState('');\n\n  return (\n    <>\n      <h1 className={styles.title}>GP Asia SWS iframe Generator</h1>\n      <div className={styles.generatorForm}>\n        <TextField required id=\"standard-basic\" label=\"Cloudflare SRC\" onChange={event => setSrc(event.target.value)} />\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <KeyboardDatePicker\n            margin=\"normal\"\n            id=\"date-picker-dialog\"\n            label=\"Date picker dialog\"\n            format=\"MM/dd/yyyy\"\n            value={selectedDate}\n            onChange={date => setSelectedDate(date)}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n          <KeyboardTimePicker\n            margin=\"normal\"\n            id=\"time-picker\"\n            label=\"Time picker\"\n            value={selectedDate}\n            onChange={date => setSelectedDate(date)}\n            KeyboardButtonProps={{\n              'aria-label': 'change time',\n            }}\n          />\n        </MuiPickersUtilsProvider>\n        <Button\n          className={styles.generate}\n          color=\"primary\"\n          onClick={() => {\n            setIframe(`<iframe src=\"https://cloudflare-stream.iusmberkeley.org/?src=${src}&startTimestamp=${Math.floor(new Date(selectedDate).getTime() / 1000)}\" width=\"100%\" height=\"100%\" frameborder=\"0\" allowfullscreen=\"true\" webkitallowfullscreen=\"true\" mozallowfullscreen=\"true\"></iframe>`);\n            const copyInput = document.querySelector('#hidden-input');\n            copyInput.focus();\n            copyInput.select();\n            document.execCommand('copy');\n          }}\n          variant=\"contained\"\n        >\n          GENERATE IFRAME\n        </Button>\n        <Button></Button>\n      </div>\n      {iframe && (\n        <div className={styles.generatedContent}>\n          <p className={styles.buttonLabel}>Copied to clipboard!</p>\n          <ReactMarkdown className={styles.iframe} source={`\\`\\`\\`${iframe}\\`\\`\\``}/>\n        </div>\n      )}\n      <input hidden readOnly id=\"hidden-input\" type=\"text\" value={iframe} />\n    </>\n  );\n}\n\nexport default IframeGenerator;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport IframeGenerator from './IframeGenerator';\n\nReactDOM.render(\n  <React.StrictMode>\n    <IframeGenerator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"IframeGenerator_title__kVqkK\",\"generatorForm\":\"IframeGenerator_generatorForm__28jyB\",\"generate\":\"IframeGenerator_generate__d0X83\",\"generatedContent\":\"IframeGenerator_generatedContent__Rz4c0\",\"buttonLabel\":\"IframeGenerator_buttonLabel__2YXRN\",\"copyButton\":\"IframeGenerator_copyButton__3T7oa\",\"iframe\":\"IframeGenerator_iframe__22w1U\"};"],"sourceRoot":""}